{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "      Question-A\n",
      "      I observed that the algorthim didn't converge. This outcome is aligned with the \n",
      "      fact that the data is not linearly separable.\n",
      "      \n",
      "\n",
      "      Question-B\n",
      "      I ran the Pocket learning algorithm for 1 million iterations to find the \n",
      "      final hyothesis function. To report the in-sample-error, only 100 iterations\n",
      "      were used. The plot also shows the in-sample-error computed after running\n",
      "      pocket algorithm on polynomial features.\n",
      "      \n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10c1494e0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "      Question-C\n",
      "      The below plot shows the generated data points and the final hypothesis learnt\n",
      "      from pocket-learning-algortihm and from fitting linear regression for classification.\n",
      "      \n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x11657c8d0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "      Question-D\n",
      "      With pocket-learning-algorithm the execution time was 0.246 and classification error 0.092.\n",
      "      With linear regression the execution time was 0.00039 and classification error 0.103. Overall\n",
      "      linear regression took less time to converge and both the algorithm were pretty close\n",
      "      with the classification error.\n",
      "      Finally the weight obtained from the linear regression was:\n",
      "      [-0.07787119 -0.02358478  0.1007703 ]\n",
      "    \n",
      "\n",
      "      Question-E\n",
      "      On running the PLA with transformed features didn't converge, similar to Question-A.\n",
      "      For in-sample-error, refer to the plot shown in Question-B. The weights obtained on the \n",
      "      new feature set defined as [1, x, y, x**2, y**2, x*y, y*x**2, x*y**2, x**3, y**3] was: [-17.0, 15.92204966869954, -5.437732475843516, -47.92859907732401, -16.705909799495434, 24.605205396453165, 29.156456568391057, -16.130341273527097, -41.497932368694485, 11.245060697958769]\n",
      "      \n"
     ]
    }
   ],
   "source": [
    "# Question 2\n",
    "import time\n",
    "import random\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from pprint import pprint\n",
    "\n",
    "# parameters\n",
    "rad = 10\n",
    "thk = 5\n",
    "\n",
    "# define functions \n",
    "# n data points,(x1,y1) are the coordinates of the top semi-circle\n",
    "def generatedata(rad, thk, sep, n, x1=0, y1=0):\n",
    "    # center of the top semi-circle\n",
    "    X1 = x1\n",
    "    Y1 = y1\n",
    "\n",
    "    # center of the bottom semi-circle\n",
    "    X2 = X1 + rad + thk / 2\n",
    "    Y2 = Y1 - sep\n",
    "    \n",
    "    # data points in the top semi-circle\n",
    "    top = []\n",
    "    # data points in the bottom semi-circle\n",
    "    bottom = []\n",
    "    \n",
    "    # parameters\n",
    "    r1 = rad + thk\n",
    "    r2 = rad\n",
    "    \n",
    "    cnt = 1\n",
    "    while(cnt <= n):\n",
    "        # uniformed generated points\n",
    "        x = np.random.uniform(-r1,r1)\n",
    "        y = np.random.uniform(-r1,r1)\n",
    "        \n",
    "        d = x**2 + y**2\n",
    "        if(d >= r2**2 and d <= r1**2):\n",
    "            if (y > 0):\n",
    "                top.append([X1 + x,Y1 + y])\n",
    "                cnt += 1\n",
    "            else:\n",
    "                bottom.append([X2 + x,Y2 + y])\n",
    "                cnt += 1\n",
    "        else:\n",
    "            continue\n",
    "    \n",
    "    return top, bottom\n",
    "\n",
    "# Defining a polynomial function\n",
    "def polynomial_transform(d):\n",
    "    x, y = d[0], d[1]\n",
    "    return [x, y, x**2, y**2, x*y, y*x**2, x*y**2, x**3, y**3]\n",
    "\n",
    "# Define the sign function which will return the sign of product of weight vector and x vector.\n",
    "\n",
    "def sign(w, x):\n",
    "    s = np.sign(np.dot(w,x))\n",
    "    return s if s != 0 else 1\n",
    "\n",
    "# Defining the PLA \n",
    "def pla_single_update(data, w):\n",
    "    # Since data is not linearly separable\n",
    "    # we will find atleast one misclassified data point\n",
    "    # and hence the while loop will always exit\n",
    "    w_next = w\n",
    "    while True:\n",
    "        d = data[random.randint(0,2*1000-1)]\n",
    "        x, y = d[:-1], d[-1]\n",
    "        if sign(w, x) != y:\n",
    "            w_next = w + x*y    \n",
    "            break        \n",
    "    return w_next\n",
    "\n",
    "def sign2(x):\n",
    "    if x >= 0:\n",
    "        return 1\n",
    "    else:\n",
    "        return -1\n",
    "    \n",
    "def Judge(x,w):\n",
    "    flag = 1\n",
    "    for i in x:\n",
    "        if sign2(i[:3].dot(w))*i[-1] < 0:\n",
    "            flag = 0\n",
    "            break\n",
    "    return flag   \n",
    "\n",
    "def train_perceptron_wu(data):\n",
    "    #number of iterations\n",
    "    s = 0\n",
    "    #initilizew=[0,0]\n",
    "    w=np.array([0,0,0],dtype = float)\n",
    "    while (Judge(data,w) == 0):\n",
    "        i = data[random.randint(0,2*1000-1)]\n",
    "        if sign2(i[:3].dot(w))*i[-1]<0:\n",
    "            w += i[-1]*i[:3]\n",
    "            s += 1\n",
    "            print(\"update the weight -> %s\"%(s))            \n",
    "    return w\n",
    "\n",
    "def pocket_alogorithm(data, itr):\n",
    "    w = np.array([0 for _ in range(data.shape[1]-1)])\n",
    "    ein = []\n",
    "    for _ in range(itr):\n",
    "        w_next = pla_single_update(data, w)\n",
    "        x, y = data[:,0:-1], data[:,-1]\n",
    "        ein_old = np.mean(np.sign(np.dot(x, w)) != y)\n",
    "        ein_new = np.mean(np.sign(np.dot(x, w_next)) != y)        \n",
    "        if ein_new <= ein_old:\n",
    "            w = w_next\n",
    "            ein.append(ein_new)\n",
    "        else:\n",
    "            ein.append(ein_old)\n",
    "    return w, ein\n",
    "        \n",
    "def get_sep_data(sep):\n",
    "    # reorganize data and randomize\n",
    "    top, bottom = generatedata(rad, thk, sep, 2000)\n",
    "\n",
    "    X1 = [i[0] for i in top]\n",
    "    Y1 = [i[1] for i in top]\n",
    "\n",
    "    X2 = [i[0] for i in bottom]\n",
    "    Y2 = [i[1] for i in bottom]\n",
    "\n",
    "    x1 = [[1] + i + [1] for i in top]\n",
    "    x2 = [[1] + i + [-1] for i in bottom]\n",
    "    data = x1 + x2\n",
    "\n",
    "    data = np.array(data)\n",
    "    np.random.shuffle(data)\n",
    "    return data, [X1, Y1, X2, Y2]\n",
    "\n",
    "def get_sep_data_transform(sep):\n",
    "    # reorganize data and randomize\n",
    "    top, bottom = generatedata(rad, thk, sep, 2000)\n",
    "\n",
    "    X1 = [i[0] for i in top]\n",
    "    Y1 = [i[1] for i in top]\n",
    "\n",
    "    X2 = [i[0] for i in bottom]\n",
    "    Y2 = [i[1] for i in bottom]\n",
    "\n",
    "    x1 = [[1] + polynomial_transform(i) + [1] for i in top]\n",
    "    x2 = [[1] + polynomial_transform(i) + [-1] for i in bottom]\n",
    "    data = x1 + x2\n",
    "\n",
    "    data = np.array(data)\n",
    "    np.random.shuffle(data)\n",
    "    return data, [X1, Y1, X2, Y2]\n",
    "\n",
    "# Set the separation to -5 for data generation\n",
    "sep = -5\n",
    "\n",
    "# Question 3a\n",
    "# The PLA will not converge as the data is not linearly separable\n",
    "# data, S = get_sep_data(sep)\n",
    "# w = train_perceptron_wu(data)\n",
    "print(\"\"\"\n",
    "      Question-A\n",
    "      I observed that the algorthim didn't converge. This outcome is aligned with the \n",
    "      fact that the data is not linearly separable.\n",
    "      \"\"\")\n",
    "\n",
    "# Question 3b\n",
    "\n",
    "print(\"\"\"\n",
    "      Question-B\n",
    "      I ran the Pocket learning algorithm for 1 million iterations to find the \n",
    "      final hyothesis function. To report the in-sample-error, only 100 iterations\n",
    "      were used. The plot also shows the in-sample-error computed after running\n",
    "      pocket algorithm on polynomial features.\n",
    "      \"\"\")\n",
    "\n",
    "itr = 1000\n",
    "plot_itr = 100\n",
    "data, S = get_sep_data(sep)\n",
    "start = time.time()\n",
    "pw, ein = pocket_alogorithm(data, itr)\n",
    "end = time.time()\n",
    "\n",
    "# Total execution time in Pocket learning Alg & error\n",
    "pocket_la_exec_time = end - start\n",
    "pocket_la_err = ein[-1]\n",
    "\n",
    "plt.plot(np.arange(1,plot_itr+1,1), ein[:plot_itr], color = \"g\", label = \"Pocket LA\")\n",
    "plt.title(\"PLA & Polynomial PLA: In Sample Error vs Iteration\")\n",
    "plt.xlabel(\"Iterations\")\n",
    "plt.ylabel(\"In Sample Error\")\n",
    "plt.grid()\n",
    "\n",
    "# Question 3e # Moving it here to combine results inside one plot\n",
    "\n",
    "# Run Pocket LA with transformed data set, Q2-b\n",
    "data, S = get_sep_data_transform(sep)\n",
    "polypw, poly_ein = pocket_alogorithm(data, itr)\n",
    "plt.plot(np.arange(1,plot_itr+1,1), poly_ein[:plot_itr], color = \"b\", label = \"Polynomial PLA\")\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "# print(\"Polynomial PLA transformed w -> %s and error %s\"%(w, ein[-1]))\n",
    "\n",
    "# # Question 3c\n",
    "print(\"\"\"\n",
    "      Question-C\n",
    "      The below plot shows the generated data points and the final hypothesis learnt\n",
    "      from pocket-learning-algortihm and from fitting linear regression for classification.\n",
    "      \"\"\")\n",
    "plt.scatter(S[0], S[1], s = 1, label=\"Positive\")\n",
    "plt.scatter(S[2], S[3], s = 1, label=\"Negative\")\n",
    "x=np.arange(-16,30,0.05) \n",
    "y=np.array([(x[i]*pw[1]+pw[0])/(-pw[2]) for i in range(len(x))])\n",
    "plt.plot(x, y, color = \"g\", label = \"Pocket LA fit\")\n",
    "plt.title(\"Pocket Learning & Linear Regression Plot\")\n",
    "plt.xlabel(\"x-axis\")\n",
    "plt.ylabel(\"y-axis\")\n",
    "plt.grid()\n",
    "\n",
    "\n",
    "# # Question 3d\n",
    "data, S = get_sep_data(sep)\n",
    "X, y = data[:,0:-1], data[:,-1]\n",
    "start = time.time()\n",
    "Psudo_X = np.matmul(np.linalg.inv(np.matmul(np.transpose(X),X)),np.transpose(X))\n",
    "W_lin = np.array(np.matmul(Psudo_X,y))\n",
    "end = time.time()\n",
    "lg_exec_time = end - start\n",
    "err_lr = np.mean(np.sign(np.dot(X, W_lin)) != y)\n",
    "\n",
    "X3=np.arange(-25,25,0.05) \n",
    "Y3=np.array([(X3[i]*W_lin[1]+W_lin[0])/(-W_lin[2]) for i in range(len(X3))])\n",
    "plt.plot(X3,Y3, color = \"r\", label = \"Regression fit\")\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "print(\"\"\"\n",
    "      Question-D\n",
    "      With pocket-learning-algorithm the execution time was %s and classification error %s.\n",
    "      With linear regression the execution time was %s and classification error %s. Overall\n",
    "      linear regression took less time to converge and both the algorithm were pretty close\n",
    "      with the classification error.\n",
    "      Finally the weight obtained from the linear regression was:\n",
    "      %s\n",
    "    \"\"\"%(\"{0:.3f}\".format(pocket_la_exec_time), \"{0:.3f}\".format(pocket_la_err), \n",
    "             \"{0:.5f}\".format(lg_exec_time), \"{0:.3f}\".format(err_lr), W_lin) )\n",
    "\n",
    "print(\"\"\"\n",
    "      Question-E\n",
    "      On running the PLA with transformed features didn't converge, similar to Question-A.\n",
    "      For in-sample-error, refer to the plot shown in Question-B. The weights obtained on the \n",
    "      new feature set defined as [1, x, y, x**2, y**2, x*y, y*x**2, x*y**2, x**3, y**3] was: %s\n",
    "      \"\"\"%(list(polypw)))\n",
    "\n",
    "# Question 3e\n",
    "\n",
    "# Run perceptron with transformed data set, Q2-a\n",
    "# The algorithm didn't converge\n",
    "# w = train_perceptron_wu(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
